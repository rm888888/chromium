# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//base/allocator/allocator.gni")
import("//build/buildflag_header.gni")
import("//build/config/buildflags_paint_preview.gni")
import("//build/config/chrome_build.gni")
import("//build/config/chromeos/ui_mode.gni")
import("//build/config/compiler/pgo/pgo.gni")
import("//build/config/arm.gni")
import("//build/config/chromecast_build.gni")
import("//build/config/mips.gni")
import("//testing/libfuzzer/fuzzer_test.gni")
import("//build/config/features.gni")
import("//build/buildflag_header.gni")
#update on 20220331
import("//third_party/abseil-cpp/absl.gni")
#
declare_args() {
  # You can set the variable 'use_official_enterprise_connectors_api_keys' to
  # true to use the Google-internal file containing official API keys
  # for enterprise connector partners even in a developer build.  Setting this
  # variable explicitly to true will cause your build to fail if the
  # internal file is missing.
  #
  # Note that official builds always behave as if the variable
  # was explicitly set to true, i.e. they always use official keys,
  # and will fail to build if the internal file is missing.
  #use_official_enterprise_connectors_api_keys = false
}

buildflag_header("buildflags") {
  header = "buildflags.h"
  flags = [
    #"USE_MINIKIN_HYPHENATION=$use_minikin_hyphenation",
    #"ENABLE_CHROMIUM_UPDATER=$enable_chromium_updater",
    #"USE_THIN_LTO=$use_thin_lto",
  ]
}
#update on 20220324
  #include_dirs = [
  #  "/Users/pundix007/Desktop/macproject/cplusplus_project/libraryTest"
  #]
  #
# Cannot be a static_library in component builds
source_set("chain_party") {
#static_library("chain_party") {
configs += [
    "//build/config/compiler:wexit_time_destructors",
    "//build/config:precompiled_headers",
  ]
  deps = [#"//testlib:testlib",
         "//third_party/abseil-cpp:absl",
         "//third_party/boringssl:boringssl",
         #"//net:net",
         "//net/third_party/quiche:quiche",
         "//remoting/client/notification:notification",
         #"//chrome/browser/ui:ui",
         "//ui/views",
         ]
  #update on 20220706
#if (is_mac) {
 #  ldflags = ["-F"+"/usr/local/curl/lib/"]
 #  libs = ["/usr/local/curl/lib/libcurl.dylib"]
#}
  #
  sources = [
    "libwallycore.h",
    "px_global_help.h",
    "signature.cc",
    "signature.h",
    "http_help.cc",
    "http_help.h",
    "json_help.h",
    "json_help.cc",
    "http_delegate.cc",
    "http_delegate.h",
    #"wallet_interface.cc",
    #"wallet_interface.h",
  ]
  #update on 20220324
  #ldflags =["/Users/pundix007/Desktop/macproject/cplusplus_project/libraryTest/cmake-build-debug/liblibraryTest.dylib",]
  #
}
