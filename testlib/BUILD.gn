# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//base/allocator/allocator.gni")
import("//build/buildflag_header.gni")
import("//build/config/buildflags_paint_preview.gni")
import("//build/config/chrome_build.gni")
import("//build/config/chromeos/ui_mode.gni")
import("//build/config/compiler/pgo/pgo.gni")
import("//build/config/arm.gni")
import("//build/config/chromecast_build.gni")
import("//build/config/mips.gni")
import("//testing/libfuzzer/fuzzer_test.gni")
import("//build/config/features.gni")
import("//build/buildflag_header.gni")
declare_args() {
  # You can set the variable 'use_official_enterprise_connectors_api_keys' to
  # true to use the Google-internal file containing official API keys
  # for enterprise connector partners even in a developer build.  Setting this
  # variable explicitly to true will cause your build to fail if the
  # internal file is missing.
  #
  # Note that official builds always behave as if the variable
  # was explicitly set to true, i.e. they always use official keys,
  # and will fail to build if the internal file is missing.
  #use_official_enterprise_connectors_api_keys = false
}

buildflag_header("buildflags") {
  header = "buildflags.h"
  flags = [
    #"USE_MINIKIN_HYPHENATION=$use_minikin_hyphenation",
    #"ENABLE_CHROMIUM_UPDATER=$enable_chromium_updater",
    #"USE_THIN_LTO=$use_thin_lto",
  ]
}

source_set("testlib") {
configs += [
    "//build/config/compiler:wexit_time_destructors",
    "//build/config:precompiled_headers",
  ]
  include_dirs = ["include"]
  cflags = ["-fexceptions",]
  deps = ["//base:base",
          "//third_party/abseil-cpp:absl",
          "//third_party/boringssl:boringssl",]
  sources = [
    #"include/json/autolink.h",
    #"include/json/config.h",
    #"include/json/features.h",
    #"include/json/forwards.h",
    #"include/json/json.h",
    #"include/json/reader.h",
    #"include/json/value.h",
    #"include/json/writer.h",
    #"src/lib_json/json_batchallocator.h",
    #"src/lib_json/json_reader.cpp",
    #"src/lib_json/json_value.cpp",
    #"src/lib_json/json_writer.cpp",
    "testClass.h",
    "testClass.cc",
  ]
}
